# Pour scrapper le site de marmiton, on utilise Selenium car le site est dynamique 

import selenium
from webdriver_manager.chrome import ChromeDriverManager

path_to_web_driver = ChromeDriverManager().install()

import time
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By 
from selenium.common.exceptions import NoSuchElementException, WebDriverException
from selenium.webdriver.chrome.service import Service

#### Scrapper 


def marmiton_scrapper(ingredient, n): 
    """ returns the data for n recipes according to a given ingredient
    
    Args : 
        ingredient (str) : the ingredient that we have to match to a recipe
        n (int) : number of results to return. We return several results so that, according to what is left in the fridge, the correspondance is optimal 

    Returns : 
        Dict : the key is the ingredient, the value is relevant data according to the recipe

    """

    chrome_options = webdriver.ChromeOptions()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    #chrome_options.add_argument('--verbose') 

    # Lancement du navigateur
    service = Service(executable_path=path_to_web_driver)

    browser = webdriver.Chrome(service=service,
                               options=chrome_options)

    # On se connecte à marmiton et on initialise l'output à un dictionnaire vide 
    output = {}
    browser.get('https://www.marmiton.org')

    # Là il faut réussir à gérer la page qui popup pour demander l'acceptation des cookies 
    # probablement un truc lié à didomi qui a l'air d'être le truc des cookies
    time.sleep(2)

    # On recherche les recettes qui nous intéressent pour un ingrédient donné 
    
    # Quand on arrive sur la page, il y a un popup nous demandant d'accepter les cookies 
    # Pas sûre de comment on le gère 
    popup = browser.find_element(By.ID,"unify-accept-finally") # ou "didomi-consent-popup" ou "didomi-notice-agree-button"
    popup.click()
    time.sleep(2)

    print("Entrée sur marmiton réussie \n")

    search = browser.find_element("name","aqt") # ou bien By.TAG_NAME,"input"
    search.send_keys(ingredient)
    search.send_keys(Keys.RETURN) # simulates pressing the "ENTER" button
    time.sleep(1)

    print(f"On trouve les recettes associées à l'ingrédient donné")

    # On extrait les résultats à l'aide du xpath 

    recettes = [elt.get_attribute("href") for x in driver.find_elements(By.XPATH,"insérer le xpath mais que je ne trouve pas")]

